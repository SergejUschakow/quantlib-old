
Getting Startet
===============

The QuantLib solution consists of three git repositories:
   quantlib-old (super repo containing projects that exports QuantLib to Excel)
   quantlib-old/QunantLib
       (sub-repo of quantlib-old containing the project for core QuantLib - only C++)
   ql/experimental/templatemodels/montecarlo/scripting
       (sub-repo of QunantLib containing Flex/Bison-based payoff scripting parser)

1) Clone your local repository
   git clone --recursive https://github.com/sschlenkrich/quantlib-old quantlib-old
   The option '--recursive' also clones the QuantLib repository
   Double-check that all sub-modules are cloned/initialised correcttly. If not
   initialise submodules manually

2) Include Boost into Viasual Studio

   The QuantLib solution requires Boost headers as well as Boost libraries. The boost
   libraries need to be compiled with the same (Visual Studio) compiler as the
   QuantLib solution. Thus first get Boost and build the Boost libraries.

   The following projects require Boost:
   - ohxllib
   - QuantLib
   - QuantLibObjects
   - QuantLibXLStatic
   Boost is incorporated via a separate property sheet Microsoft.Cpp.Win32.Boost.props.
   A template sheet is located in quantlib-old/Microsoft.Cpp.Win32.Boost.props.template.
   Copy and rename the template to Microsoft.Cpp.Win32.Boost.props. Then edit it in a
   text editor and update paths to your local Boost installation
   Note: You need to have Boost libraries compiled with Visual Studio Compiler and
   corresponding single/multi threading and release/debug options
   
2) Open Solution ..\quantlib-old\QuantLibXL\QuantLibXL_full_vc14.sln

3) quantLib-old relies on auto-generated C++ source code which is generated by Python 2.7
   scripts. Thus you need a working Python 2.7 installation.
   
   If Python is not detected correctly by Visual Studio check and edit the PYTHON
   variable in the make-files:
   quantlib-old\ObjectHandler\gensrc\Makefile.vc
   quantlib-old\QuantLibAddin\gensrc\Makefile.vc

   Check if Python is incorporated correctly by building the projects ohgensrc and
   qlgensrc.

4) Check if Boost is incorporated correctly by building the project QuantLib.
   
3) Build the whole solution and create Excel Addin (e.g. ...\quantlib\QuantLibXL\xll\QuantLibXL-vc90-mt-gd-1_1_0.xll)

Develop a feature
=================

1) Create a branch in QuantLib and check it out, e.g. git checkout -b myfeature

2) Add QuantLib source code
   - Create a new folder ..\quantlib\QuantLib\ql\experimental\myfeature
   - Create your source files (e.g. myfeature.hpp and myfeature.cpp)
   - In VS add a new filter QuantLib / experimental / myfeature
   - Add your source files in filter myfeature
   - Code your features and make sure they compile properly

3) Create a branch in quantlib-old and check it out, e.g. git checkout -b myfeature
   
4) Add QuantLibObjects source code (for Excel and other interfaces)
   - Create your object source files (e.g. myfeature.hpp and myfeature.cpp) in ..\quantlib\QuantLibAddin\qlo
   - In VS add a new filter QuantLibObjects / Experimental / MyFeature
   - Add your object source files in filter MyFeature
   - Make sure they compile properly
   
5) Add interface specification in qlgensrc (i.e. include your feature in Excel interface)
   - create a new file ..\quantlib\QuantLibAddin\gensrc\metadata\functions\myfeature.xml
   - In VS add the new file in qlgensrc / functions / experimental / myfeature.xml
   - Add myfeature in qlgensrc / config / categories.xml
   - Add new object types in qlgensrc / config / types.xml
   - Build qlgensrc
   - Add new created object files to QuantLibObjects
     valueobjects: vo_myfeature.hpp/.cpp
	 serialization / create: create_myfeature.hpp/.cpp
	 serialization / register: serialization_myfeature.hpp/.cpp
   - check that QuantLibObjects builds properly
   - Add new created files to QuantLibXLStatic
     functions: functions / sabrswaptioncube.cpp
	 register: register / register_sabrswaptioncube.cpp
   - Build QuantLibXLStatic
   
6) Document your feature
   - Create a standalone example workbook that documents your feature
   - Add it to ..\quantlib\QuantLibXL\Workbooks\Experimental
   
7) Make feature available for others
   - commit your modifications and push them to both repositories
   - if everything is fine merge your branch into master
