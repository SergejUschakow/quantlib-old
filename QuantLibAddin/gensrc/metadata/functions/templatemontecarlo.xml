<Category name='templatemontecarlo'>
  <description>functions and methods for template based MC simulation.</description>
  <displayName>Template Quasi Gaussain Model</displayName>
  <xlFunctionWizardCategory>QuantLib - Financial</xlFunctionWizardCategory>
  <serializationIncludes>
    <include>qlo/conversions/coercetermstructure.hpp</include>
    <include>qlo/baseinstruments.hpp</include>
    <include>qlo/termstructures.hpp</include>
    <include>qlo/pricingengines.hpp</include>
    <include>qlo/bonds.hpp</include>
    <include>qlo/swaption.hpp</include>
    <include>qlo/schedule.hpp</include>    
    <include>qlo/templatemontecarlo.hpp</include>
    <include>qlo/swaption.hpp</include>
    <include>qlo/indexes/swapindex.hpp</include>
    <include>ql/instruments/swaption.hpp</include>
  </serializationIncludes>
  <addinIncludes>
    <include>qlo/handleimpl.hpp</include>
    <include>qlo/conversions/coercetermstructure.hpp</include>
    <include>qlo/baseinstruments.hpp</include>
    <include>qlo/termstructures.hpp</include>
    <include>qlo/pricingengines.hpp</include>
    <include>qlo/bonds.hpp</include>
    <include>qlo/swaption.hpp</include>
    <include>qlo/schedule.hpp</include>
    <include>qlo/templatemontecarlo.hpp</include>
    <include>qlo/swaption.hpp</include>
    <include>qlo/indexes/swapindex.hpp</include>
    <include>ql/instruments/swaption.hpp</include>
  </addinIncludes>
  <copyright>
    Copyright (C) 2015, Sebastian Schlenkrich
  </copyright>
  <Functions>

    <!-- Constructor(s) for RealMCSimulation -->

    <Constructor name='qlRealMCSimulation'>
      <libraryFunction>RealMCSimulation</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ProcessOrModel' >
            <type>QuantLib::RealStochasticProcess</type>
            <tensorRank>scalar</tensorRank>
            <description>reference to process or model.</description>
          </Parameter>
          <Parameter name='SimTimes' exampleValue='5, 10, ...'>
            <type>QuantLib::Time</type>
            <tensorRank>vector</tensorRank>
            <description>vector of time-grid for SDE integration (in year fractions)</description>
          </Parameter>
          <Parameter name='ObsTimes' exampleValue='5, 10, ...'>
            <type>QuantLib::Time</type>
            <tensorRank>vector</tensorRank>
            <description>vector of time-grid for process observation (in year fractions)</description>
          </Parameter>
          <Parameter name='NPaths' exampleValue ='1024' default='1024' >
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>number of MC paths.</description>
          </Parameter>
          <Parameter name='Seed' exampleValue ='1234' default='1234' >
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>MC seed.</description>
          </Parameter>
          <Parameter name='RichardsonExtrapolation' exampleValue ='true' default='true'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>use Richardson extrapolation (true or false).</description>
          </Parameter>
          <Parameter name='TimeInterpolation' exampleValue ='true' default='true'>
            <type>bool</type>
             <tensorRank>scalar</tensorRank>
            <description>allow time-interpolation for payoff evaluation on simulated paths (true or false).</description>
          </Parameter>
          <Parameter name='StoreBrownians' exampleValue ='false' default='false'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>store Brownian motion increments (true or false).</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <!-- Run simulation with RealMCSimulation -->

    <Member name='qlRealMCSimulationSimulate' type='QuantLib::RealMCSimulation' >
      <description>Simulate MC paths.</description>
      <libraryFunction>simulate</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>void</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <!-- Inspectors for RealMCSimulation -->

    <Member name='qlRealMCSimulationSimTimes' type='QuantLib::RealMCSimulation' >
      <description>Returns simulation times.</description>
      <libraryFunction>simTimes</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Time</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlRealMCSimulationObsTimes' type='QuantLib::RealMCSimulation' >
      <description>Returns observation times.</description>
      <libraryFunction>obsTimes</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Time</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlRealMCSimulationNPaths' type='QuantLib::RealMCSimulation' >
      <description>Returns number of MC paths.</description>
      <libraryFunction>nPaths</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Size</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlRealMCSimulationBrownian' type='QuantLib::RealMCSimulation' >
      <description>Returns the n-th Brownian increments.</description>
      <libraryFunction>brownian</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='N' exampleValue ='0' default='0' >
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>index of MC path (0 .. nPaths).</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Time</type>
        <tensorRank>matrix</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlRealMCSimulationPath' type='QuantLib::RealMCSimulation' >
      <description>Returns the n-th MC path.</description>
      <libraryFunction>observedPath</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='N' exampleValue ='0' default='0' >
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>index of MC path (0 .. nPaths).</description>
          </Parameter>
        </Parameters>      
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Time</type>
        <tensorRank>matrix</tensorRank>
      </ReturnValue>
    </Member>

    <!-- Numeraire adjuster calculation and inspectors -->

    <Member name='qlRealMCSimulationCalcNumeraireAdjuster' type='QuantLib::RealMCSimulation' >
      <description>calculate the Numeraire adjuster vector for given simulation.</description>
      <libraryFunction>calculateNumeraireAdjuster</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='NumeraireObservTimes' exampleValue='5, 10, ...'>
            <type>QuantLib::Time</type>
            <tensorRank>vector</tensorRank>
            <description>vector of time-grid for zcb adjuster (in year fractions)</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>void</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlRealMCSimulationNumeraireAdjuster' type='QuantLib::RealMCSimulation' >
      <description>Returns the Numeraire adjuster vector.</description>
      <libraryFunction>numeraireAdjuster</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlRealMCSimulationNumeraireAdjustertT' type='QuantLib::RealMCSimulation' >
      <description>Returns the Numeraire adjuster .</description>
      <libraryFunction>numeraireAdjuster</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObsTime' exampleValue ='1' default='1' >
            <type>QuantLib::Time</type>
            <tensorRank>scalar</tensorRank>
            <description>zcb observation time.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>


    <!-- ZCB adjuster calculation and inspectors -->
    
    <Member name='qlRealMCSimulationCalcZCBAdjuster' type='QuantLib::RealMCSimulation' >
      <description>calculate the ZCB adjuster matrix for given simulation.</description>
      <libraryFunction>calculateZCBAdjuster</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ZcbObservTimes' exampleValue='5, 10, ...'>
            <type>QuantLib::Time</type>
            <tensorRank>vector</tensorRank>
            <description>vector of time-grid for zcb adjuster (in year fractions)</description>
          </Parameter>
          <Parameter name='ZcbOffsetTimes' exampleValue='5, 10, ...'>
            <type>QuantLib::Time</type>
            <tensorRank>vector</tensorRank>
            <description>vector of time-grid for zcb adjuster (in year fractions)</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>void</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlRealMCSimulationZCBAdjuster' type='QuantLib::RealMCSimulation' >
      <description>Returns the zcb adjuster matrix.</description>
      <libraryFunction>zcbAdjuster</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Time</type>
        <tensorRank>matrix</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlRealMCSimulationZCBAdjustertT' type='QuantLib::RealMCSimulation' >
      <description>Returns the zcb adjuster .</description>
      <libraryFunction>zcbAdjuster</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObsTime' exampleValue ='1' default='1' >
            <type>QuantLib::Time</type>
            <tensorRank>scalar</tensorRank>
            <description>zcb observation time.</description>
          </Parameter>
          <Parameter name='MatTime' exampleValue ='2' default='2' >
            <type>QuantLib::Time</type>
            <tensorRank>scalar</tensorRank>
            <description>zcb maturity time.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <!-- Asset adjuster calculation and inspectors -->

    <Member name='qlRealMCSimulationCalcAssetAdjuster' type='QuantLib::RealMCSimulation' >
      <description>calculate the asset adjuster vector for given simulation.</description>
      <libraryFunction>calculateAssetAdjuster</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='AssetObservTimes' exampleValue='5, 10, ...'>
            <type>QuantLib::Time</type>
            <tensorRank>vector</tensorRank>
            <description>vector of time-grid for asset adjuster (in year fractions)</description>
          </Parameter>
          <Parameter name='Aliases' exampleValue='EUR, USD, ...'>
            <type>string</type>
            <tensorRank>vector</tensorRank>
            <description>vector of aliases for which adjusters should de calculated</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>void</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlRealMCSimulationAssetAdjuster' type='QuantLib::RealMCSimulation' >
      <description>Returns the asset adjuster vector.</description>
      <libraryFunction>assetAdjuster</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Alias' exampleValue ='EUR' >
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>asset alias.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlRealMCSimulationAssetAdjustertT' type='QuantLib::RealMCSimulation' >
      <description>Returns the asset adjuster .</description>
      <libraryFunction>assetAdjuster</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObsTime' exampleValue ='1' default='1' >
            <type>QuantLib::Time</type>
            <tensorRank>scalar</tensorRank>
            <description>asset observation time.</description>
          </Parameter>
          <Parameter name='Alias' exampleValue ='EUR' >
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>asset alias.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>


    <!-- Payoffs and Pricer -->

    <Procedure name='qlRealMCPayoffsNPV' >
      <description>Returns NPV of simulated payoff.</description>
      <alias>QuantLib::RealMCPayoffPricer::NPV</alias>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Payoffs' >
            <type>QuantLib::RealMCPayoff</type>
            <tensorRank>vector</tensorRank>
            <description>reference to payoffs.</description>
          </Parameter>
          <Parameter name='Simulation' >
            <type>QuantLib::RealMCSimulation</type>
            <tensorRank>scalar</tensorRank>
            <description>reference to RealMCSimulation object.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlRealMCPayoffAt' >
      <description>Returns NPV of simulated payoff.</description>
      <alias>QuantLib::RealMCPayoffPricer::at</alias>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Payoff' >
            <type>QuantLib::RealMCPayoff</type>
            <tensorRank>scalar</tensorRank>
            <description>reference to payoff.</description>
          </Parameter>
          <Parameter name='Simulation' >
            <type>QuantLib::RealMCSimulation</type>
            <tensorRank>scalar</tensorRank>
            <description>reference to RealMCSimulation object.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlRealMCPayoffDiscountedAt' >
      <description>Returns NPV of simulated payoff.</description>
      <alias>QuantLib::RealMCPayoffPricer::discountedAt</alias>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Payoff' >
            <type>QuantLib::RealMCPayoff</type>
            <tensorRank>scalar</tensorRank>
            <description>reference to payoff.</description>
          </Parameter>
          <Parameter name='Simulation' >
            <type>QuantLib::RealMCSimulation</type>
            <tensorRank>scalar</tensorRank>
            <description>reference to RealMCSimulation object.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Procedure>

    <Constructor name='qlRealMCPayoffPricer'>
      <libraryFunction>RealMCPayoffPricer</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Payoffs' >
            <type>QuantLib::RealMCPayoff</type>
            <tensorRank>vector</tensorRank>
            <description>reference to payoffs.</description>
          </Parameter>
          <Parameter name='Simulation' >
            <type>QuantLib::RealMCSimulation</type>
            <tensorRank>scalar</tensorRank>
            <description>reference to RealMCSimulation object.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Member name='qlRealMCPayoffPricerNPV' type='QuantLib::RealMCPayoffPricer' >
      <description>Returns NPV of simulated payoff.</description>
      <libraryFunction>NPV</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Constructor name='qlRealMCClone'>
      <libraryFunction>RealMCClone</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='X' >
            <type>QuantLib::RealMCPayoff</type>
            <tensorRank>scalar</tensorRank>
            <description>reference to payoff.</description>
          </Parameter>
          <Parameter name='ObservationTime' exampleValue ='1' default='1' >
            <type>QuantLib::Time</type>
            <tensorRank>scalar</tensorRank>
            <description>new observation time (t).</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlRealMCCash'>
      <libraryFunction>RealMCCash</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObservationTime' exampleValue ='1' default='1' >
            <type>QuantLib::Time</type>
            <tensorRank>scalar</tensorRank>
            <description>observation time (t).</description>
          </Parameter>
          <Parameter name='PayTime' exampleValue ='2' default='2' >
            <type>QuantLib::Time</type>
            <tensorRank>scalar</tensorRank>
            <description>payment time (T).</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlRealMCAsset'>
      <libraryFunction>RealMCAsset</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObservationTime' exampleValue ='1' default='1' >
            <type>QuantLib::Time</type>
            <tensorRank>scalar</tensorRank>
            <description>observation time (t).</description>
          </Parameter>
          <Parameter name='Alias' >
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>alias of underlying asset.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlRealMCAssetBarrierNoHit'>
      <libraryFunction>RealMCAssetBarrierNoHit</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='BarrierStartTime' exampleValue ='1' default='1' >
            <type>QuantLib::Time</type>
            <tensorRank>scalar</tensorRank>
            <description>start time of barrier observation.</description>
          </Parameter>
          <Parameter name='BarrierEndTime' exampleValue ='1' default='1' >
            <type>QuantLib::Time</type>
            <tensorRank>scalar</tensorRank>
            <description>start time of barrier observation.</description>
          </Parameter>
          <Parameter name='DownBarrier' exampleValue ='1' default='1' >
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>lower barrier value.</description>
          </Parameter>
          <Parameter name='UpBarrier' exampleValue ='1' default='1' >
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>upper barrier value.</description>
          </Parameter>
          <Parameter name='DownOrUpOrBoth' exampleValue ='0' default='0' >
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>down barrier (-1), up barrier (+1), double barrier (0)</description>
          </Parameter>
          <Parameter name='Alias' >
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>alias of underlying asset.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>


    <Constructor name='qlRealMCVanillaOption'>
      <libraryFunction>RealMCVanillaOption</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObservationTime' exampleValue ='1' default='1' >
            <type>QuantLib::Time</type>
            <tensorRank>scalar</tensorRank>
            <description>observation time (t).</description>
          </Parameter>
          <Parameter name='Alias' >
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>alias of underlying asset.</description>
          </Parameter>
          <Parameter name='Strike' exampleValue ='2' default='2' >
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>option strike.</description>
          </Parameter>
          <Parameter name='CallOrPut' exampleValue ='2' default='2' >
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>call (+1) or Put (-1) option.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    
    <Constructor name='qlRealMCAnnuity'>
      <libraryFunction>RealMCAnnuity</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObservationTime' exampleValue ='1' default='1' >
            <type>QuantLib::Time</type>
            <tensorRank>scalar</tensorRank>
            <description>observation time (t).</description>
          </Parameter>
          <Parameter name='PayTimes' >
            <type>QuantLib::Time</type>
            <tensorRank>vector</tensorRank>
            <description>vector of payment times.</description>
          </Parameter>
          <Parameter name='PayWeights' >
            <type>QuantLib::Real</type>
            <tensorRank>vector</tensorRank>
            <description>vector of payment weights (usually year fractions).</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlRealMCModelSwaption'>
      <libraryFunction>RealMCModelSwaption</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObservationTime' exampleValue ='1' default='1' >
            <type>QuantLib::Time</type>
            <tensorRank>scalar</tensorRank>
            <description>observation time (t).</description>
          </Parameter>
          <Parameter name='Times' >
            <type>QuantLib::Time</type>
            <tensorRank>vector</tensorRank>
            <description>vector of start and payment times.</description>
          </Parameter>
          <Parameter name='PayWeights' >
            <type>QuantLib::Real</type>
            <tensorRank>vector</tensorRank>
            <description>vector of payment weights (usually year fractions).</description>
          </Parameter>
          <Parameter name='StrikeRate' >
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>strike (or swap fixed) rate.</description>
          </Parameter>
          <Parameter name='PayOrReceive' >
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>pay (+1) or receive (-1) fixed rate.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlRealMCGeneralSwaption'>
      <libraryFunction>RealMCGeneralSwaption</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObservationTime' exampleValue ='1' default='1' >
            <type>QuantLib::Time</type>
            <tensorRank>scalar</tensorRank>
            <description>observation time (t).</description>
          </Parameter>
          <Parameter name='FloatTimes' >
            <type>QuantLib::Time</type>
            <tensorRank>vector</tensorRank>
            <description>vector of float leg payment times.</description>
          </Parameter>
          <Parameter name='FloatWeights' >
            <type>QuantLib::Real</type>
            <tensorRank>vector</tensorRank>
            <description>vector of float leg cash flows (usually 1 and -1).</description>
          </Parameter>
          <Parameter name='FixedTimes' >
            <type>QuantLib::Time</type>
            <tensorRank>vector</tensorRank>
            <description>vector of fixed leg payment times.</description>
          </Parameter>
          <Parameter name='FixedWeights' >
            <type>QuantLib::Real</type>
            <tensorRank>vector</tensorRank>
            <description>vector of fixed leg weights (usually year fractions).</description>
          </Parameter>
          <Parameter name='StrikeRate' >
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>strike (or swap fixed) rate.</description>
          </Parameter>
          <Parameter name='PayOrReceive' >
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>pay (+1) or receive (-1) fixed rate.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlRealMCSwaption'>
      <libraryFunction>RealMCGeneralSwaption</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Swaption' >
            <type>QuantLib::Swaption</type>
            <tensorRank>scalar</tensorRank>
            <description>reference to swaption instrument.</description>
          </Parameter>
          <Parameter name='DiscountCurve'>
            <type>QuantLib::YieldTermStructure</type>
            <superType>libToHandle</superType>
            <tensorRank>scalar</tensorRank>
            <description>Discount curve.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlRealMCSwapRate'>
      <libraryFunction>RealMCSwapRate</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Swaption' >
            <type>QuantLib::Swaption</type>
            <tensorRank>scalar</tensorRank>
            <description>reference to swaption instrument.</description>
          </Parameter>
          <Parameter name='DiscountCurve'>
            <type>QuantLib::YieldTermStructure</type>
            <superType>libToHandle</superType>
            <tensorRank>scalar</tensorRank>
            <description>Discount curve.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlRealMCSwapRate2'>
      <libraryFunction>RealMCSwapRate</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='FixingTime' >
            <type>QuantLib::Time</type>
            <tensorRank>scalar</tensorRank>
            <description>future swap rate fixing times.</description>
          </Parameter>
          <Parameter name='SwapIndex' >
            <type>QuantLib::SwapIndex</type>
            <tensorRank>scalar</tensorRank>
            <description>reference to swap index.</description>
          </Parameter>
          <Parameter name='DiscountCurve'>
            <type>QuantLib::YieldTermStructure</type>
            <superType>libToHandle</superType>
            <tensorRank>scalar</tensorRank>
            <description>Discount curve.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>


    <Constructor name='qlRealMCModelCorrelation'>
      <libraryFunction>RealMCModelCorrelation</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObservationTimes' >
            <type>QuantLib::Time</type>
            <tensorRank>vector</tensorRank>
            <description>vector of observation (fixing) times.</description>
          </Parameter>
          <Parameter name='SwapTermOne' exampleValue ='2' default='2' >
            <type>QuantLib::Time</type>
            <tensorRank>scalar</tensorRank>
            <description>swap term in year fractions.</description>
          </Parameter>
          <Parameter name='SwapTermTwo' exampleValue ='10' default='10' >
            <type>QuantLib::Time</type>
            <tensorRank>scalar</tensorRank>
            <description>swap term in year fractions.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlRealMCForwardRateCorrelation'>
      <libraryFunction>RealMCForwardRateCorrelation</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObservationTimes' >
            <type>QuantLib::Time</type>
            <tensorRank>vector</tensorRank>
            <description>vector of observation (fixing) times.</description>
          </Parameter>
          <Parameter name='FixingTimeOne' exampleValue ='5' default='5' >
            <type>QuantLib::Time</type>
            <tensorRank>scalar</tensorRank>
            <description>swap term in year fractions.</description>
          </Parameter>
          <Parameter name='SwapTermOne' exampleValue ='2' default='2' >
            <type>QuantLib::Time</type>
            <tensorRank>scalar</tensorRank>
            <description>swap term in year fractions.</description>
          </Parameter>
          <Parameter name='FixingTimeTwo' exampleValue ='5' default='5' >
            <type>QuantLib::Time</type>
            <tensorRank>scalar</tensorRank>
            <description>swap term in year fractions.</description>
          </Parameter>
          <Parameter name='SwapTermTwo' exampleValue ='10' default='10' >
            <type>QuantLib::Time</type>
            <tensorRank>scalar</tensorRank>
            <description>swap term in year fractions.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

   <!-- MC swap stuff -->

    <Constructor name='qlRealMCFixedAmount'>
      <libraryFunction>RealMCFixedAmount</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Amount' exampleValue ='1.0' default='1.0' >
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>fixed amount.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlRealMCLiborRate'>
      <libraryFunction>RealMCLiborRate</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='FixingTime' exampleValue ='1.0' default='1.0' >
            <type>QuantLib::Time</type>
            <tensorRank>scalar</tensorRank>
            <description>forward libor fixing time.</description>
          </Parameter>
          <Parameter name='IborIndex' exampleValue='Libor3M'>
            <type>QuantLib::IborIndex</type>
            <tensorRank>scalar</tensorRank>
            <description>Forcasting Ibor index (for tenor basis).</description>
          </Parameter>
          <Parameter name='DiscountCurve'>
            <type>QuantLib::YieldTermStructure</type>
            <superType>libToHandle</superType>
            <tensorRank>scalar</tensorRank>
            <description>YieldTermStructure for discounting.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlRealMCLiborRate2'>
      <libraryFunction>RealMCLiborRate</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='FixingTime' exampleValue ='1.0' default='1.0' >
            <type>QuantLib::Time</type>
            <tensorRank>scalar</tensorRank>
            <description>forward libor fixing time.</description>
          </Parameter>
          <Parameter name='StartTime' exampleValue ='1.0' default='1.0' >
            <type>QuantLib::Time</type>
            <tensorRank>scalar</tensorRank>
            <description>forward libor fixing time.</description>
          </Parameter>
          <Parameter name='EndTime' exampleValue ='1.0' default='1.0' >
            <type>QuantLib::Time</type>
            <tensorRank>scalar</tensorRank>
            <description>forward libor fixing time.</description>
          </Parameter>
          <Parameter name='IborIndex' exampleValue='Libor3M'>
            <type>QuantLib::IborIndex</type>
            <tensorRank>scalar</tensorRank>
            <description>Forcasting Ibor index (for tenor basis).</description>
          </Parameter>
          <Parameter name='DiscountCurve'>
            <type>QuantLib::YieldTermStructure</type>
            <superType>libToHandle</superType>
            <tensorRank>scalar</tensorRank>
            <description>YieldTermStructure for discounting.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlRealMCAxpy'>
      <libraryFunction>RealMCAxpy</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='A' exampleValue ='1.0' default='1.0' >
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>multiplier</description>
          </Parameter>
          <Parameter name='X' >
            <type>QuantLib::RealMCPayoff</type>
            <tensorRank>scalar</tensorRank>
            <description>reference to payoff.</description>
          </Parameter>
          <Parameter name='Y' >
            <type>QuantLib::RealMCPayoff</type>
            <tensorRank>scalar</tensorRank>
            <description>reference to payoff.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlRealMCMult'>
      <libraryFunction>RealMCMult</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='X' >
            <type>QuantLib::RealMCPayoff</type>
            <tensorRank>scalar</tensorRank>
            <description>reference to payoff.</description>
          </Parameter>
          <Parameter name='Y' >
            <type>QuantLib::RealMCPayoff</type>
            <tensorRank>scalar</tensorRank>
            <description>reference to payoff.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlRealMCMax'>
      <libraryFunction>RealMCMax</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='X' >
            <type>QuantLib::RealMCPayoff</type>
            <tensorRank>scalar</tensorRank>
            <description>reference to payoff.</description>
          </Parameter>
          <Parameter name='Y' >
            <type>QuantLib::RealMCPayoff</type>
            <tensorRank>scalar</tensorRank>
            <description>reference to payoff.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlRealMCMin'>
      <libraryFunction>RealMCMin</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='X' >
            <type>QuantLib::RealMCPayoff</type>
            <tensorRank>scalar</tensorRank>
            <description>reference to payoff.</description>
          </Parameter>
          <Parameter name='Y' >
            <type>QuantLib::RealMCPayoff</type>
            <tensorRank>scalar</tensorRank>
            <description>reference to payoff.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlRealMCPay'>
      <libraryFunction>RealMCPay</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='X' >
            <type>QuantLib::RealMCPayoff</type>
            <tensorRank>scalar</tensorRank>
            <description>reference to payoff.</description>
          </Parameter>
          <Parameter name='PayTime' exampleValue ='1.0' default='1.0' >
            <type>QuantLib::Time</type>
            <tensorRank>scalar</tensorRank>
            <description>time at which payoff is paid.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlRealMCCache'>
      <libraryFunction>RealMCCache</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='X' >
            <type>QuantLib::RealMCPayoff</type>
            <tensorRank>scalar</tensorRank>
            <description>reference to payoff.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlRealMCLogical'>
      <libraryFunction>RealMCLogical</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='X' >
            <type>QuantLib::RealMCPayoff</type>
            <tensorRank>scalar</tensorRank>
            <description>reference to payoff.</description>
          </Parameter>
          <Parameter name='Y' >
            <type>QuantLib::RealMCPayoff</type>
            <tensorRank>scalar</tensorRank>
            <description>reference to payoff.</description>
          </Parameter>
          <Parameter name='Op' >
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>operator symbol or string.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlRealMCIfThenElse'>
      <libraryFunction>RealMCIfThenElse</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='X' >
            <type>QuantLib::RealMCPayoff</type>
            <tensorRank>scalar</tensorRank>
            <description>reference to 'if' payoff.</description>
          </Parameter>
          <Parameter name='Y' >
            <type>QuantLib::RealMCPayoff</type>
            <tensorRank>scalar</tensorRank>
            <description>reference to 'then' payoff.</description>
          </Parameter>
          <Parameter name='Z' >
            <type>QuantLib::RealMCPayoff</type>
            <tensorRank>scalar</tensorRank>
            <description>reference to 'else' payoff.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlRealMCBasket'>
      <libraryFunction>RealMCBasket</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Underlyings' >
            <type>QuantLib::RealMCPayoff</type>
            <tensorRank>vector</tensorRank>
            <description>vector of references to basket payoffs.</description>
          </Parameter>
          <Parameter name='Weights' >
            <type>QuantLib::Real</type>
            <tensorRank>vector</tensorRank>
            <description>Basket weights.</description>
          </Parameter>
          <Parameter name='Rainbow' >
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>If True then sort underlyings descending.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlRealMCScript'>
      <libraryFunction>RealMCScript</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Keys' >
            <type>string</type>
            <tensorRank>vector</tensorRank>
            <description>keys for initial payoff map.</description>
          </Parameter>
          <Parameter name='Payoffs' >
            <type>QuantLib::RealMCPayoff</type>
            <tensorRank>vector</tensorRank>
            <description>values for initial payoff map.</description>
          </Parameter>
          <Parameter name='Script' >
            <type>string</type>
            <tensorRank>vector</tensorRank>
            <description>Payoff script extending the payoff map.</description>
          </Parameter>
          <Parameter name='OverwritePayoff' >
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>Allow overwriting payoffs in map.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Member name='qlRealMCScriptLog' type='QuantLib::RealMCScript' >
      <description>Return ScriptLog.</description>
      <libraryFunction>scriptLog</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>string</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlRealMCScriptExpressions' type='QuantLib::RealMCScript' >
      <description>Return expression trees.</description>
      <libraryFunction>expressions</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>string</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlRealMCScriptNPV' type='QuantLib::RealMCScript' >
      <description>Returns NPV of simulated payoffs.</description>
      <libraryFunction>NPV</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Simulation' >
            <type>QuantLib::RealMCSimulation</type>
            <tensorRank>scalar</tensorRank>
            <description>reference to RealMCSimulation object.</description>
          </Parameter>
          <Parameter name='Keys' >
            <type>string</type>
            <tensorRank>vector</tensorRank>
            <description>payoffs names</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlRealMCScriptObservationTimes' type='QuantLib::RealMCScript' >
      <description>Returns observation times of simulated payoffs.</description>
      <libraryFunction>observationTimes</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Keys' >
            <type>string</type>
            <tensorRank>vector</tensorRank>
            <description>payoffs names</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>



    <Constructor name='qlRealMCCashFlow'>
      <libraryFunction>RealMCCashFlow</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='X' >
            <type>QuantLib::RealMCPayoff</type>
            <tensorRank>scalar</tensorRank>
            <description>reference to payoff.</description>
          </Parameter>
          <Parameter name='StartTime' exampleValue ='1.0' default='1.0' >
            <type>QuantLib::Time</type>
            <tensorRank>scalar</tensorRank>
            <description>time at which CashFlow starts.</description>
          </Parameter>
          <Parameter name='PayTime' exampleValue ='1.5' default='1.5' >
            <type>QuantLib::Time</type>
            <tensorRank>scalar</tensorRank>
            <description>time at which CashFlow is paid.</description>
          </Parameter>
          <Parameter name='ApplyZCBAdjuster' exampleValue ='false' default='false' >
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>Incorporate ZCB adjuster by multiplication with P(T,T).</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlRealMCLeg'>
      <libraryFunction>RealMCLeg</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='CashFlows' >
            <type>QuantLib::RealMCCashFlow</type>
            <tensorRank>vector</tensorRank>
            <description>reference to CashFlows.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlRealMCCancellableNote'>
      <libraryFunction>RealMCCancellableNote</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Underlyings' >
            <type>QuantLib::RealMCLeg</type>
            <tensorRank>vector</tensorRank>
            <description>reference (vector) to underlying legs.</description>
          </Parameter>
          <Parameter name='CallTimes' >
            <type>QuantLib::Time</type>
            <tensorRank>vector</tensorRank>
            <description>vector of exercise times.</description>
          </Parameter>
          <Parameter name='EarlyRedemptions' >
            <type>QuantLib::RealMCLeg</type>
            <tensorRank>vector</tensorRank>
            <description>reference (vector) to early redemptions or strikes.</description>
          </Parameter>
          <Parameter name='RegressionVariables' >
            <type>QuantLib::RealMCLeg</type>
            <tensorRank>vector</tensorRank>
            <description>reference (vector) to regression var's as CashFlows.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlRealAMCPricer'>
      <libraryFunction>RealAMCPricer</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Note' >
            <type>QuantLib::RealMCCancellableNote</type>
            <tensorRank>scalar</tensorRank>
            <description>reference to note.</description>
          </Parameter>
          <Parameter name='Simulation' >
            <type>QuantLib::RealMCSimulation</type>
            <tensorRank>scalar</tensorRank>
            <description>reference to MC simulation object.</description>
          </Parameter>
          <Parameter name='RegressionFraction' exampleValue ='0.3' default='0.0'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Fraction of paths used for regression.</description>
          </Parameter>
          <Parameter name='MaxPolynDegree' exampleValue ='0' default='0'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>maximum degree of monomial for regression.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Member name='qlRealAMCPricerCalculate' type='QuantLib::RealAMCPricer' >
      <description>Perform AMC calculation.</description>
      <libraryFunction>calculate</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>void</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlRealAMCPricerData' type='QuantLib::RealAMCPricer' >
      <description>Return calculated internal data.</description>
      <libraryFunction>data</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
       <Parameters>
        <Parameter name='Tag' >
          <type>string</type>
          <tensorRank>scalar</tensorRank>
          <description>tag  (X, R, B, G, T).</description>
        </Parameter>
       </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Time</type>
        <tensorRank>matrix</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlRealAMCPricerNoteNPV' type='QuantLib::RealAMCPricer' >
      <description>Return npv of callable note.</description>
      <libraryFunction>noteNPV</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlRealAMCPricerUnderlyingNPV' type='QuantLib::RealAMCPricer' >
      <description>Return npv of note w/o calls.</description>
      <libraryFunction>underlyingNPV</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Constructor name='qlRealAMCMax'>
      <libraryFunction>RealAMCMax</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='X' >
            <type>QuantLib::RealMCPayoff</type>
            <tensorRank>vector</tensorRank>
            <description>payoffs that are discounted and summed up.</description>
          </Parameter>
          <Parameter name='Y' >
            <type>QuantLib::RealMCPayoff</type>
            <tensorRank>vector</tensorRank>
            <description>other payoffs that are discounted and summed up.</description>
          </Parameter>
          <Parameter name='Z' >
            <type>QuantLib::RealMCPayoff</type>
            <tensorRank>vector</tensorRank>
            <description>regression variables for trigger evaluation.</description>
          </Parameter>
          <Parameter name='ObservationTime' exampleValue ='1.0' default='1.0' >
            <type>QuantLib::Time</type>
            <tensorRank>scalar</tensorRank>
            <description>(exercise) time at which maximum is observed.</description>
          </Parameter>
          <Parameter name='Simulation' >
            <type>QuantLib::RealMCSimulation</type>
            <tensorRank>scalar</tensorRank>
            <description>reference to MC simulation used for regression.</description>
          </Parameter>
          <Parameter name='MaxPolynDegree' exampleValue ='0' default='0'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>maximum degree of monomial for regression.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlRealAMCMin'>
      <libraryFunction>RealAMCMin</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='X' >
            <type>QuantLib::RealMCPayoff</type>
            <tensorRank>vector</tensorRank>
            <description>payoffs that are discounted and summed up.</description>
          </Parameter>
          <Parameter name='Y' >
            <type>QuantLib::RealMCPayoff</type>
            <tensorRank>vector</tensorRank>
            <description>other payoffs that are discounted and summed up.</description>
          </Parameter>
          <Parameter name='Z' >
            <type>QuantLib::RealMCPayoff</type>
            <tensorRank>vector</tensorRank>
            <description>regression variables for trigger evaluation.</description>
          </Parameter>
          <Parameter name='ObservationTime' exampleValue ='1.0' default='1.0' >
            <type>QuantLib::Time</type>
            <tensorRank>scalar</tensorRank>
            <description>(exercise) time at which maximum is observed.</description>
          </Parameter>
          <Parameter name='Simulation' >
            <type>QuantLib::RealMCSimulation</type>
            <tensorRank>scalar</tensorRank>
            <description>reference to MC simulation used for regression.</description>
          </Parameter>
          <Parameter name='MaxPolynDegree' exampleValue ='0' default='0'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>maximum degree of monomial for regression.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>


    <!-- Regression operator and functions -->

    <Constructor name='qlRealRegression'>
      <libraryFunction>RealRegression</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Controls' >
            <type>QuantLib::Time</type>
            <tensorRank>matrix</tensorRank>
            <description>matrix of control variables.</description>
          </Parameter>
          <Parameter name='Observations' >
            <type>QuantLib::Real</type>
            <tensorRank>vector</tensorRank>
            <description>vector of observations.</description>
          </Parameter>
          <Parameter name='MaxDegree' >
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>maximum degree of monomial.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Member name='qlRealRegressionMonomials' type='QuantLib::RealRegression' >
      <description>Return monomial values based on explanatory variables.</description>
      <libraryFunction>monomials</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='X' >
            <type>QuantLib::Real</type>
            <tensorRank>vector</tensorRank>
            <description>vector of explanatory variables.</description>
          </Parameter>
        </Parameters>          
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlRealRegressionValue' type='QuantLib::RealRegression' >
      <description>Return regression value based on explanatory variables.</description>
      <libraryFunction>value</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='X' >
            <type>QuantLib::Real</type>
            <tensorRank>vector</tensorRank>
            <description>vector of explanatory variables.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlRealRegressionMaxDegree' type='QuantLib::RealRegression' >
      <description>Return max degree of monomials.</description>
      <libraryFunction>maxDegree</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlRealRegressionMultiIndex' type='QuantLib::RealRegression' >
      <description>Return matrix of multi indeces.</description>
      <libraryFunction>multiIndex</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Time</type>
        <tensorRank>matrix</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlRealRegressionBeta' type='QuantLib::RealRegression' >
      <description>Return regression coefficients.</description>
      <libraryFunction>beta</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>


    <Constructor name='qlRealMCAverageFutureOption'>
      <libraryFunction>RealMCAverageFutureOption</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObservationTime' exampleValue ='1' default='1' >
            <type>QuantLib::Time</type>
            <tensorRank>scalar</tensorRank>
            <description>observation time (t).</description>
          </Parameter>
          <Parameter name='SettlementTimes' >
            <type>QuantLib::Time</type>
            <tensorRank>vector</tensorRank>
            <description>vector of settlement times.</description>
          </Parameter>
          <Parameter name='SettlementWeights' >
            <type>QuantLib::Real</type>
            <tensorRank>vector</tensorRank>
            <description>vector of weights for each settlement.</description>
          </Parameter>
          <Parameter name='Strike' exampleValue ='1' default='1' >
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>option strike.</description>
          </Parameter>
          <Parameter name='CallOrPut' exampleValue ='2' default='2' >
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>call (+1) or Put (-1) option.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>


    <Constructor name='qlRealMCAverageFutureCovariance'>
      <libraryFunction>RealMCAverageFutureCovariance</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObservationTimes' >
            <type>QuantLib::Time</type>
            <tensorRank>vector</tensorRank>
            <description>vector of observation times.</description>
          </Parameter>
          <Parameter name='SettlementTimesA' >
            <type>QuantLib::Time</type>
            <tensorRank>vector</tensorRank>
            <description>vector of settlement times.</description>
          </Parameter>
          <Parameter name='SettlementWeightsA' >
            <type>QuantLib::Real</type>
            <tensorRank>vector</tensorRank>
            <description>vector of weights for each settlement.</description>
          </Parameter>
          <Parameter name='ObservationLagA' >
            <type>QuantLib::Time</type>
            <tensorRank>scalar</tensorRank>
            <description>Minimum observation lag (before roll over).</description>
          </Parameter>
          <Parameter name='SettlementTimesB' >
            <type>QuantLib::Time</type>
            <tensorRank>vector</tensorRank>
            <description>vector of settlement times.</description>
          </Parameter>
          <Parameter name='SettlementWeightsB' >
            <type>QuantLib::Real</type>
            <tensorRank>vector</tensorRank>
            <description>vector of weights for each settlement.</description>
          </Parameter>
          <Parameter name='ObservationLagB' >
            <type>QuantLib::Time</type>
            <tensorRank>scalar</tensorRank>
            <description>Minimum observation lag (before roll over).</description>
          </Parameter>
          <Parameter name='UseLogReturns' default='false' example='false'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>Log or Normal returns.</description>
          </Parameter>
          <Parameter name='CalculatioType' default='0' example='0'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>Covariance (0), correlation (1), spread variance (2).</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>



  </Functions>
</Category>
